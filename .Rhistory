best_linFit <- lm(log(Price) ~ City*(Normalised.Attraction.Index + Normalised.Restraunt.Index)^2 + sqrt(Bedrooms) , data=AirbnbTrain)
# Predict on the test set
pred_best <- predict(best_linFit, newdata = AirbnbTest)
# Calculate MSE
MSE_best <- sqrt(mean((exp(pred_best) - log(AirbnbTest$Price))^2))
R2_best= cor(exp(pred_best), log(AirbnbTest$Price))^2
R2_best
MSE_best
pred_best <- predict(best_linFit, newdata = AirbnbTest, interval='prediction')
y = AirbnbTest$Price
yhat = exp(pred_best)
# Assuming pred.log contains the lower and upper prediction intervals
AirbnbTest$Pred = exp(pred.log[, "fit"])
pred_best <- predict(best_linFit, newdata = AirbnbTest, interval='prediction')
y = AirbnbTest$Price
yhat = exp(pred_best)
# Assuming pred.log contains the lower and upper prediction intervals
AirbnbTest$Pred = exp(pred_best[, "fit"])
AirbnbTest$Real = y
AirbnbTest$Lower = exp(pred_best[, "lwr"])
AirbnbTest$Upper = exp(pred_best[, "upr"])
# Prediction Interval Plot
AirbnbTest %>%
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2) +
labs(title = "Prediction Intervals", y = "Real Delays") +
theme_minimal()
View(pred_best)
pred_best <- predict(best_linFit, newdata = AirbnbTest, interval='prediction')
y = AirbnbTest$Price
yhat = exp(pred_best)
# Assuming pred.log contains the lower and upper prediction intervals
AirbnbTest$Pred = exp(pred_best[, "fit"])
AirbnbTest$Real = y
AirbnbTest$Lower = exp(pred_best[, "lwr"])
AirbnbTest$Upper = exp(pred_best[, "upr"])
# Prediction Interval Plot
AirbnbTest %>%
ggplot(plot_data, aes(x = Real, y = Pred)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.3, fill = "blue") +
labs(title = "Scatter Plot of Real vs. Predicted",
x = "Real",
y = "Predicted")
pred_best <- predict(best_linFit, newdata = AirbnbTest, interval='prediction')
y = AirbnbTest$Price
yhat = exp(pred_best)
# Assuming pred.log contains the lower and upper prediction intervals
AirbnbTest$Pred = exp(pred_best[, "fit"])
AirbnbTest$Real = y
AirbnbTest$Lower = exp(pred_best[, "lwr"])
AirbnbTest$Upper = exp(pred_best[, "upr"])
# Create a data frame for plotting
plot_data <- data.frame(Real = AirbnbTest$Real,
Pred = AirbnbTest$Pred,
Lower = AirbnbTest$Lower,
Upper = AirbnbTest$Upper)
# Prediction Interval Plot
AirbnbTest %>%
ggplot(plot_data, aes(x = Real, y = Pred)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.3, fill = "blue") +
labs(title = "Scatter Plot of Real vs. Predicted",
x = "Real",
y = "Predicted")
pred_best <- predict(best_linFit, newdata = AirbnbTest, interval='prediction')
y = AirbnbTest$Price
yhat = exp(pred_best)
# Assuming pred.log contains the lower and upper prediction intervals
AirbnbTest$Pred = exp(pred_best[, "fit"])
AirbnbTest$Real = y
AirbnbTest$Lower = exp(pred_best[, "lwr"])
AirbnbTest$Upper = exp(pred_best[, "upr"])
# Create a data frame for plotting
plot_data <- data.frame(Real = AirbnbTest$Real,
Pred = AirbnbTest$Pred,
Lower = AirbnbTest$Lower,
Upper = AirbnbTest$Upper)
# Prediction Interval Plot
ggplot(plot_data, aes(x = Real, y = Pred)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.3, fill = "blue") +
labs(title = "Scatter Plot of Real vs. Predicted",
x = "Real",
y = "Predicted")
# Counting the points outside the intervals
outside_interval_count <- sum(AirbnbTest$Real < AirbnbTest$Lower | AirbnbTest$Real > AirbnbTest$Upper)
# Calculating the coverage
total_points <- nrow(AirbnbTest)
coverage <- round(100-(outside_interval_count / total_points) * 100, digits=1)
# Printing the coverage
print(paste("Percentage of points inside the intervals:", coverage, "%"))
pred_best <- predict(best_linFit, newdata = AirbnbTest, interval='prediction')
y = AirbnbTest$Price
yhat = exp(pred_best)
# Assuming pred.log contains the lower and upper prediction intervals
AirbnbTest$Pred = exp(pred_best[, "fit"])
AirbnbTest$Real = y
AirbnbTest$Lower = exp(pred_best[, "lwr"])
AirbnbTest$Upper = exp(pred_best[, "upr"])
# Create a data frame for plotting
plot_data <- data.frame(Real = AirbnbTest$Real,
Pred = AirbnbTest$Pred,
Lower = AirbnbTest$Lower,
Upper = AirbnbTest$Upper)
# Prediction Interval Plot
ggplot(plot_data, aes(x = Real, y = Pred)) +
geom_point() +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.3, fill = "blue") +
labs(title = "Scatter Plot of Real vs. Predicted",
x = "Real",
y = "Predicted")
plot(simple_linFit, pch=23 ,bg='orange',cex=2)
plot(best_linFit, pch=23 ,bg='orange',cex=2)
best_linFit <- lm(log(Price) ~ City*(Normalised.Attraction.Index + Normalised.Restraunt.Index)^2 + sqrt(Bedrooms) , data=AirbnbTrain)
# Predict on the test set
pred_best <- exp(predict(best_linFit, newdata = AirbnbTest))
# Calculate MSE
MSE_best <- sqrt(mean((pred_best - log(AirbnbTest$Price))^2))
R2_best= cor(pred, log(AirbnbTest$Price))^2
R2_best
MSE_best
plot(best_linFit, pch=23 ,bg='orange',cex=2)
Salary <- read.csv("Data_Analyst_Jobs.csv")
View(Salary)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
# split between training and testing sets
spl = createDataPartition(Salary$Salary.Estimate, p = 0.8, list = FALSE)  # 80% for training
library(tidyverse)
library(MASS)
library(caret) #ML tools
library(e1071)
library(tidyverse)
library(MASS)
library(caret) #ML tools
library(e1071)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
# split between training and testing sets
spl = createDataPartition(Salary$Salary.Estimate, p = 0.8, list = FALSE)  # 80% for training
# split between training and testing sets
spl = createDataPartition(Salary_data$Salary.Estimate, p = 0.8, list = FALSE)  # 80% for training
Salary_data_Train = Airbnb[spl,]
# split between training and testing sets
spl = createDataPartition(Salary_data$Salary.Estimate, p = 0.8, list = FALSE)  # 80% for training
Salary_data_Train = Salary_data[spl,]
Salary_data_Test = Salary_data[-spl,]
str(Salary_data_Train)
View(Salary_data)
library(dplyr)
# Extract numerical values
Salary_data <- Salary_data %>%
mutate(Salary.Estimate = gsub("\\D", "", Salary.Estimate)) %>%
mutate(Salary.Estimate = as.numeric(Salary.Estimate))
# Convert values to mean (divide by 2) and scale to thousands
Salary_data$Salary.Estimate <- Salary_data$Salary.Estimate / 2 / 1000
# Display the modified data frame
print(Salary_data)
View(Salary_data)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
# Load necessary library
library(dplyr)
# Extract numerical values
Salary_data <- Salary_data %>%
mutate(Salary.Estimate = gsub("\\D", "", Salary.Estimate)) %>%
mutate(Salary.Estimate = as.numeric(Salary.Estimate))
# Calculate the median of the original range
Salary_data$Salary.Estimate <- Salary_data %>%
rowwise() %>%
mutate(Median_Salary = median(c(Salary.Estimate[1], Salary.Estimate[2])))
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
Salary_data$Salary.Estimate / 2 / 1000
Salary_data <- Salary_data %>%
mutate(Salary.Estimate = gsub("\\D", "", Salary.Estimate)) %>%
mutate(Salary.Estimate = as.numeric(Salary.Estimate))
Salary_data$Salary.Estimate / 2 / 1000
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
# Load necessary library
library(dplyr)
# Extract numerical values
Salary_data <- Salary_data %>%
mutate(Salary.Estimate = gsub("\\D", "", Salary.Estimate))
View(Salary_data)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
# Load necessary library
library(dplyr)
Salary_data <- Salary_data %>%
mutate(Salary.Range = gsub("[^0-9\\-]+", "", Salary.Estimate)) %>%
separate(Salary.Range, into = c("Lower", "Upper"), sep = "-") %>%
mutate(Lower = as.numeric(Lower),
Upper = as.numeric(Upper),
Median_Salary = (Lower + Upper) / 2 / 1000) %>%
select(-Salary.Range)
# Load necessary library
library(dplyr)
Salary_data <- Salary_data %>%
mutate(Salary.Range = gsub("[^0-9\\-]+", "", Salary.Estimate)) %>%
separate(Salary.Range, into = c("Lower", "Upper"), sep = "-") %>%
mutate(Lower = as.numeric(Lower),
Upper = as.numeric(Upper),
Median_Salary = (Lower + Upper) / 2 / 1000)
Salary.Range
# Load necessary library
library(dplyr)
Salary_data <- Salary_data %>%
mutate(Salary.Range = gsub("[^0-9\\-]+", "", Salary.Estimate)) %>%
separate(Salary.Range, into = c("Lower", "Upper"), sep = "-") %>%
mutate(Lower = as.numeric(Lower),
Upper = as.numeric(Upper),
Median_Salary = (Lower + Upper) / 2 / 1000) %>%
select(-Salary.Range)
# Load necessary library
library(dplyr)
Salary_data <- Salary_data %>%
mutate(Salary.Range = gsub("[^0-9\\-]+", "", Salary.Estimate)) %>%
separate(Salary.Range, into = c("Lower", "Upper"), sep = "-") %>%
mutate(Lower = as.numeric(Lower),
Upper = as.numeric(Upper),
Median_Salary = (Lower + Upper) / 2 / 1000) %>%
select(-c(Salary.Range))
# Load necessary library
library(dplyr)
Salary_data <- Salary_data %>%
mutate(Salary.Estimate = gsub("[^0-9\\-]+", "", Salary.Estimate)) %>%
separate(Salary.Estimate, into = c("Lower", "Upper"), sep = "-") %>%
mutate(Lower = as.numeric(Lower),
Upper = as.numeric(Upper),
Salary.Estimate= (Lower + Upper) / 2 / 1000)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
# Load necessary library
library(dplyr)
Salary_data <- Salary_data %>%
mutate(Salary.Estimate = gsub("[^0-9\\-]+", "", Salary.Estimate)) %>%
separate(Salary.Estimate, into = c("Lower", "Upper"), sep = "-") %>%
mutate(Lower = as.numeric(Lower),
Upper = as.numeric(Upper),
Salary.Estimate= (Lower + Upper) / 2 * 1000)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
# Load necessary library
library(dplyr)
Salary_data <- Salary_data %>%
mutate(Salary.Estimate = gsub("[^0-9\\-]+", "", Salary.Estimate)) %>%
separate(Salary.Estimate, into = c("Lower", "Upper"), sep = "-") %>%
mutate(Salary.Estimate= (as.numeric(Lower) +as.numeric(Upper)) / 2 * 1000)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
# Load necessary library
library(dplyr)
Salary_data <- Salary_data %>%
mutate(Salary.Estimate = gsub("[^0-9\\-]+", "", Salary.Estimate)) %>%
separate(Salary.Estimate, into = c("Lower", "Upper"), sep = "-") %>%
mutate(Salary.Estimate= (as.numeric(Lower) +as.numeric(Upper)) / 2 * 1000) %>%
select(-c(Lower))
# Load necessary library
library(dplyr)
Salary_data <- Salary_data %>%
mutate(Salary.Estimate = gsub("[^0-9\\-]+", "", Salary.Estimate)) %>%
separate(Salary.Estimate, into = c("Lower", "Upper"), sep = "-") %>%
mutate(Salary.Estimate= (as.numeric(Lower) +as.numeric(Upper)) / 2 * 1000)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
print(Salary_data)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
print(Salary_data$Salary.Estimate)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
Salary_data$Salary.Estimate
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
Salary_data$Salary.Estimate
# Load necessary library
library(dplyr)
Salary_data <- Salary_data %>%
mutate(Salary.Estimate = gsub("[^0-9\\-]+", "", Salary.Estimate)) %>%
separate(Salary.Estimate, into = c("Lower", "Upper"), sep = "-") %>%
mutate(Salary.Estimate= (as.numeric(Lower) +as.numeric(Upper)) / 2 * 1000)
Salary_data <- select(Salary_data, -Lower, -Upper)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
Salary_data$Salary.Estimate
# Load necessary library
library(dplyr)
Salary_data <- Salary_data %>%
mutate(Salary.Estimate = gsub("[^0-9\\-]+", "", Salary.Estimate)) %>%
separate(Salary.Estimate, into = c("Lower", "Upper"), sep = "-") %>%
mutate(Salary.Estimate= (as.numeric(Lower) +as.numeric(Upper)) / 2 * 1000) %>%
subset(Salary_data, select = -c(Lower, Upper ))
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
#Salary_data$Salary.Estimate
# Load necessary library
library(dplyr)
Salary_data <- Salary_data %>%
mutate(Salary.Estimate = gsub("[^0-9\\-]+", "", Salary.Estimate)) %>%
separate(Salary.Estimate, into = c("Lower", "Upper"), sep = "-") %>%
mutate(Salary.Estimate= (as.numeric(Lower) +as.numeric(Upper)) / 2 * 1000)
Salary_data <- subset(Salary_data, select = -c(Lower, Upper))
# split between training and testing sets
spl = createDataPartition(Salary_data$Salary.Estimate, p = 0.8, list = FALSE)  # 80% for training
Salary_data_Train = Salary_data[spl,]
Salary_data_Test = Salary_data[-spl,]
str(Salary_data_Train)
Salary_data_Train <- subset(Salary_data_Train, select = -Job.Description)
View(Salary_data_Test)
View(Salary_data_Train)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
#Salary_data$Salary.Estimate
# Load necessary library
library(dplyr)
Salary_data <- Salary_data %>%
mutate(Salary.Estimate = gsub("[^0-9\\-]+", "", Salary.Estimate)) %>%
separate(Salary.Estimate, into = c("Lower", "Upper"), sep = "-") %>%
mutate(Salary.Estimate= (as.numeric(Lower) +as.numeric(Upper)) / 2 * 1000)
Salary_data <- subset(Salary_data, select = -c(Lower, Upper))
# split between training and testing sets
spl = createDataPartition(Salary_data$Salary.Estimate, p = 0.8, list = FALSE)  # 80% for training
Salary_data_Train = Salary_data[spl,]
Salary_data_Test = Salary_data[-spl,]
str(Salary_data_Train)
Salary_data_Train <- subset(Salary_data_Train, select = -c(Job.Description, index))
any(is.na(Salary_data_Train))
any(is.na(Salary_data_Train))
str(Salary_data_Train)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
#Salary_data$Salary.Estimate
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
#Salary_data$Salary.Estimate
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
View(Salary_data)
# split between training and testing sets
spl = createDataPartition(Salary_data$Avg.Salary.K., p = 0.8, list = FALSE)  # 80% for training
library(tidyverse)
library(MASS)
library(caret) #ML tools
library(e1071)
library(tidyverse)
library(MASS)
library(caret) #ML tools
library(e1071)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
# split between training and testing sets
spl = createDataPartition(Salary_data$Avg.Salary.K., p = 0.8, list = FALSE)  # 80% for training
Salary_data_Train = Salary_data[spl,]
Salary_data_Test = Salary_data[-spl,]
str(Salary_data_Train)
Salary_data_Train <- subset(Salary_data_Train, select = -c(Job.Description, index, Salary.Estimate, Lower.Salary, Upper.Salary ))
any(is.na(Salary_data_Train))
table(Salary_data_Train$Job.Title)
table(Salary_data_Train$Company.Name)
table(Salary_data_Train$Location)
table(Salary_data_Train$Headquarters)
table(Salary_data_Train$Size)
table(Salary_data_Train$Type.of.ownership)
table(Salary_data_Train$Industry )
table(Salary_data_Train$Sector )
table(Salary_data_Train$Revenue)
table(Salary_data_Train$Competitors)
table(Salary_data_Train$company_txt )
table(Salary_data_Train$Job.Location)
table(Salary_data_Train$job_title_sim)
table(Salary_data_Train$seniority_by_title)
table(Salary_data_Train$Degree)
any(is.na(Salary_data_Train))
table(Salary_data_Train$Job.Title)
table(Salary_data_Train$Company.Name)
table(Salary_data_Train$Location)
table(Salary_data_Train$Headquarters)
any(is.na(Salary_data_Train))
table(Salary_data_Train$Job.Title)
table(Salary_data_Train$Company.Name)
table(Salary_data_Train$Location)
table(Salary_data_Train$Headquarters)
table(Salary_data_Train$Size)
table(Salary_data_Train$Type.of.ownership)
table(Salary_data_Train$Industry )
table(Salary_data_Train$Sector )
table(Salary_data_Train$Revenue)
table(Salary_data_Train$Competitors)
table(Salary_data_Train$company_txt )
table(Salary_data_Train$Job.Location)
table(Salary_data_Train$job_title_sim)
table(Salary_data_Train$seniority_by_title)
table(Salary_data_Train$Degree)
View(Salary_data)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
# split between training and testing sets
spl = createDataPartition(Salary_data$Avg.Salary.K., p = 0.8, list = FALSE)  # 80% for training
Salary_data_Train = Salary_data[spl,]
Salary_data_Test = Salary_data[-spl,]
str(Salary_data_Train)
Salary_data_Train <- subset(Salary_data_Train, select = -c(Job.Description, index, Salary.Estimate, Lower.Salary, Upper.Salary, Company.Name ))
any(is.na(Salary_data_Train))
table(Salary_data_Train$Job.Title)
table(Salary_data_Train$Location)
table(Salary_data_Train$Headquarters)
table(Salary_data_Train$Revenue)
table(Salary_data_Train$Competitors)
table(Salary_data_Train$company_txt )
table(Salary_data_Train$Job.Location)
table(Salary_data_Train$job_title_sim)
table(Salary_data_Train$seniority_by_title)
table(Salary_data_Train$Degree)
any(is.na(Salary_data_Train))
table(Salary_data_Train$Job.Title)
table(Salary_data_Train$Location)
table(Salary_data_Train$Headquarters)
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
# split between training and testing sets
spl = createDataPartition(Salary_data$Avg.Salary.K., p = 0.8, list = FALSE)  # 80% for training
Salary_data_Train = Salary_data[spl,]
Salary_data_Test = Salary_data[-spl,]
str(Salary_data_Train)
Salary_data_Train <- subset(Salary_data_Train, select = -c(Job.Description, Job.Title, index, Salary.Estimate, Lower.Salary, Upper.Salary, Company.Name ))
any(is.na(Salary_data_Train))
table(Salary_data_Train$Location)
table(Salary_data_Train$Headquarters)
table(Salary_data_Train$Size)
table(Salary_data_Train$Type.of.ownership)
table(Salary_data_Train$Industry )
table(Salary_data_Train$Sector )
View(Salary_data_Train)
length(unique(Salary_data_Train$Industry))
length(unique(Salary_data_Train$Sector))
Salary_data_Train <- subset(Salary_data_Train, select = -Industry)
Salary_data_Train <- subset(Salary_data_Train, select = -Competitors)
Salary_data_Train <- subset(Salary_data_Train, select = -c(seniority_by_title,Degree))
table(Salary_data_Train$Revenue)
table(Salary_data_Train$Location)
table(Salary_data_Train$Job.Location)
length(unique(Salary_data_Train$Job.Location))
length(unique(Salary_data_Train$Location))
Salary_data <- read.csv("Data_Analyst_Jobs.csv")
# split between training and testing sets
spl = createDataPartition(Salary_data$Avg.Salary.K., p = 0.8, list = FALSE)  # 80% for training
Salary_data_Train = Salary_data[spl,]
Salary_data_Test = Salary_data[-spl,]
str(Salary_data_Train)
Salary_data_Train <- subset(Salary_data_Train, select = -c(Job.Description, Job.Title, Location, index, Salary.Estimate, Lower.Salary, Upper.Salary, Company.Name ))
any(is.na(Salary_data_Train))
table(Salary_data_Train$Headquarters)
table(Salary_data_Train$Size)
table(Salary_data_Train$Type.of.ownership)
table(Salary_data_Train$Industry )
table(Salary_data_Train$Sector )
Salary_data_Train <- subset(Salary_data_Train, select = -Industry)
table(Salary_data_Train$Revenue)
table(Salary_data_Train$Competitors)
table(Salary_data_Train$company_txt )
Salary_data_Train <- subset(Salary_data_Train, select = -Competitors)
table(Salary_data_Train$Job.Location)
table(Salary_data_Train$job_title_sim)
table(Salary_data_Train$seniority_by_title)
table(Salary_data_Train$Degree)
Salary_data_Train <- subset(Salary_data_Train, select = -c(seniority_by_title,Degree))
table(Salary_data_Train$Hourly)
table(Salary_data_Train$Hourly) # 1: If salary was reported in hourly rate. 0: Otherwise
table(Salary_data_Train$Employer.provided) # 1: If the salary was provided by the employer 0: Otherwise
table(Salary_data_Train$Hourly) # 1: If salary was reported in hourly rate. 0: Otherwise
table(Salary_data_Train$Employer.provided) # 1: If the salary was provided by the employer 0: Otherwise
# 1: If x skill is required 0: Otherwise
table(Salary_data_Train$Python)
table(Salary_data_Train$spark)
table(Salary_data_Train$aws)
table(Salary_data_Train$excel)
table(Salary_data_Train$sql)
table(Salary_data_Train$sas)
table(Salary_data_Train$keras)
table(Salary_data_Train$pytorch)
table(Salary_data_Train$scikit)
table(Salary_data_Train$tensor)
table(Salary_data_Train$hadoop)
table(Salary_data_Train$tableau)
table(Salary_data_Train$bi)
table(Salary_data_Train$flink)
table(Salary_data_Train$mongo)
table(Salary_data_Train$google_an) #1: If Google analytics certificate is required 0: Otherwise
summary(Salary_data_Train$Rating)
summary(Salary_data_Train$Rating) # It gives the rating of the company
table(Salary_data_Train$Founded)# aunque es numerica no interesa la media al ser años
summary(Salary_data_Train$Age) # Age of the company (in yrs)
summary(Salary_data_Train$Avg.Salary.K.)
table(Salary_data_Train$Rating) # It gives the rating of the company
table(Salary_data_Train$Founded)# aunque es numerica no interesa la media al ser años
table(Salary_data_Train$Age) # Age of the company (in yrs)
table(Salary_data_Train$Avg.Salary.K.)
summary(Salary_data_Train$Rating) # It gives the rating of the company
summary(Salary_data_Train$Founded)# aunque es numerica no interesa la media al ser años
summary(Salary_data_Train$Age) # Age of the company (in yrs)
summary(Salary_data_Train$Avg.Salary.K.)
Salary_data_Train
ggplot(Salary_data_Train, aes(Avg.Salary.K.)) + geom_density(fill="lightblue") + xlab("Avg Salary") + ggtitle("Avg Salary distribution")
ggplot(Salary_data_Train, aes(log(Avg.Salary.K.))) + geom_density(fill="lightblue") + xlab("Avg Salary") + ggtitle("Avg Salary distribution")
ggplot(Salary_data_Train, aes(Avg.Salary.K.)) + geom_density(fill="lightblue") + xlab("Avg Salary") + ggtitle("Avg Salary distribution")
ggplot(Salary_data_Train, aes(log(Avg.Salary.K.))) + geom_density(fill="lightblue") + xlab("log(Avg Salary)") + ggtitle("Avg Salary distribution")
Arrests %>%
ggplot(aes(x = log(Avg.Salary.K.), y = Rating)) +
geom_boxplot(fill="lightblue") +
labs(title = "Salary by age", x = "", y = "", col = "")
Salary_data_Train %>%
ggplot(aes(x = log(Avg.Salary.K.), y = Rating)) +
geom_boxplot(fill="lightblue") +
labs(title = "Salary by age", x = "", y = "", col = "")
ggplot(Salary_data_Train, aes(log(Avg.Salary.K))) + geom_density(aes(group=job_title_sim, colour=job_title_sim, fill=job_title_sim), alpha=0.1) + ggtitle("Salary distribution by job title")
ggplot(Salary_data_Train, aes(log(Avg.Salary.K.))) + geom_density(aes(group=job_title_sim, colour=job_title_sim, fill=job_title_sim), alpha=0.1) + ggtitle("Salary distribution by job title")
table(Salary_data_Train$job_title_sim)
# delete everything
rm(list=ls())
library(tidyverse)
library(effects)
# delete everything
rm(list=ls())
library(tidyverse)
library(effects)
