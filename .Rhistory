library(tidyverse)
library(MASS)
library(caret) #ML tools
library(e1071)
par(mar = c(2, 2, 2, 2))
# Loading and preparing data
Airbnb <- read.csv("Airbnb_data.csv")
Airbnb
# split between training and testing sets
spl = createDataPartition(Airbnb$Price, p = 0.8, list = FALSE)  # 80% for training
AirbnbTrain = Airbnb[spl,]
AirbnbTest = Airbnb[-spl,]
str(AirbnbTrain)
any(is.na(AirbnbTrain))
summary(AirbnbTrain)
AirbnbTrain <- subset(AirbnbTrain, select = -c(Attraction.Index, Restraunt.Index ))
AirbnbTrain <- subset(AirbnbTrain, select = -c(Private.Room, Shared.Room ))
AirbnbTrain$Superhost<-as.numeric(as.logical(AirbnbTrain$Superhost))
ggplot(AirbnbTrain, aes(Price)) + geom_density(fill="lightblue") + xlab("log(Price)") + ggtitle("Price distribution")
## from the statistics obtained before we know price has no 0 values as minimum is 34, so we can apply the logarithm to better visualize it
ggplot(AirbnbTrain, aes(log(Price))) + geom_density(fill="lightblue") + xlab("log(Price)") + ggtitle("Price distribution")
mean(log(AirbnbTrain$Price))
exp(mean(log(AirbnbTrain$Price)))
ggplot(AirbnbTrain, aes(log(Price))) + geom_density(aes(group=City, colour=City, fill=City), alpha=0.1) + ggtitle("Price distribution")
ggplot(AirbnbTrain, aes(x=City.Center..km., y=log(Price), color=City)) + geom_point(alpha=0.8) + ggtitle("Price vs City Center distance")
ggplot(AirbnbTrain, aes(x=Metro.Distance..km., y=log(Price), color=City)) + geom_point(alpha=0.8) + ggtitle("Price vs Metro distance")
## Moving the objective function to the last position
AirbnbTrain<-AirbnbTrain[, c(1:(2 - 1), (2 + 1):ncol(AirbnbTrain), 2)]
corr_delay <- sort(cor(AirbnbTrain[,c(4:15)])["Price",], decreasing = T)
corr=data.frame(corr_delay)
ggplot(corr,aes(x = row.names(corr), y = corr_delay)) +
geom_bar(stat = "identity", fill = "lightblue") +
scale_x_discrete(limits= row.names(corr)) +
labs(x = "", y = "Price", title = "Correlations") +
theme(plot.title = element_text(hjust = 0, size = rel(1.5)),
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(AirbnbTrain, aes(x=Bedrooms, y=log(Price), color=City)) + geom_point(alpha=0.8) + ggtitle("Price vs Metro distance")
ggplot(AirbnbTrain, aes(x=Bedrooms, y=log(Price), color=City)) + barplot(alpha=0.8) + ggtitle("Price vs Metro distance")
ggplot(AirbnbTrain, aes(x=Bedrooms, y=log(Price), color=City)) + barplot() + ggtitle("Price vs Metro distance")
ggplot(AirbnbTrain, aes(x=Bedrooms, y=log(Price), color=City)) + barplot.default() + ggtitle("Price vs Metro distance")
ggplot(AirbnbTrain, aes(x=Bedrooms, y=log(Price), color=City)) + geom_point(alpha=0.8) + ggtitle("Price vs Metro distance")
ggplot(AirbnbTrain, aes(x = Bedrooms, y = log(Price), fill = City)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.8) +
ggtitle("Price vs Number of bedrooms")
ggplot(AirbnbTrain, aes(x = Bedrooms, y = log(Price)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.8) +
ggtitle("Price vs Number of bedrooms")
ggplot(AirbnbTrain, aes(x = Bedrooms, y = log(Price))) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.8) +
ggtitle("Price vs Number of bedrooms")
ggplot(AirbnbTrain, aes(x = Bedrooms, y = log(Price), fill = City)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.8) +
ggtitle("Price vs Number of bedrooms")
table(AirbnbTrain$Bedrooms)
ggplot(AirbnbTrain, aes(x=Normalised.Attraction.Index, y=log(Price), color=City)) + geom_point(alpha=0.8) + ggtitle("Price vs City Center distance")
ggplot(AirbnbTrain, aes(x=Normalised.Attraction.Index, y=log(Price))) + geom_point(alpha=0.8) + ggtitle("Price vs City Center distance")
ggplot(AirbnbTrain, aes(x=Normalised.Attraction.Index, y=log(Price), color=City)) + geom_point(alpha=0.8) + ggtitle("Price vs City Center distance")
ggplot(AirbnbTrain, aes(x=Normalised.Attraction.Index, y=log(Price), color=City)) + geom_point(alpha=0.8) + ggtitle("Price vs Attraction Index")
ggplot(AirbnbTrain, aes(x=Normalised.Restraunt.Index, y=log(Price), color=City)) + geom_point(alpha=0.8) + ggtitle("Price vs Restraunt Index")
