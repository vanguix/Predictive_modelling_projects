# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_f_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Hourly + Employer.provided + sas  + google_an*Size + Type.of.ownership + Sector*Python + Revenue^2, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_f_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Hourly + Employer.provided   + google_an*Size + Type.of.ownership + Sector*Python + Revenue*sas, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_f_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim + Hourly + Employer.provided   + google_an + Size + Type.of.ownership + Sector + Python + Revenue + sas, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_f_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Hourly + Employer.provided   + google_an*Size + Type.of.ownership + Sector*Python + Revenue*sas, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_f_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim + Hourly + Employer.provided   + google_an + Size + Type.of.ownership + Sector + Python + Revenue + sas, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Hourly + Employer.provided   + google_an*Size + Type.of.ownership + Sector*Python + Revenue*sas, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim  + Sector  + Revenue , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector  + Revenue , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector*Hourly  + Revenue , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector  + Revenue , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector  + Revenue + Type.of.ownership, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector  + Revenue^2, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector  + Revenue, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue +Size, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ (job_title_sim*Python)^2  + Sector+ Revenue, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim  + Sector*Python+ Revenue, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim  + Sector+ Revenue*Python, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue +sas, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue *sas, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector*sas+ Revenue , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python*sas  + Sector+ Revenue , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue*sas , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue*sas + google_an, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue*sas , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector*google_an+ Revenue*sas , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue*sas , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue*sas + Hourly , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue*sas , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue*sas + Type.of.ownership , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ Revenue*sas , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ (Revenue*sas)^2 , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ sqrt(Revenue*sas) , family = Gamma, data = Salary_data_Train)
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector+ log(Revenue*sas) , family = Gamma, data = Salary_data_Train)
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector^2+ Revenue*sas , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector + Size Revenue*sas , family = Gamma, data = Salary_data_Train)
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector + Size+  Revenue*sas , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector + Revenue*sas , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
other_glm = glm(Avg.Salary.K. ~ job_title_sim + Hourly + Employer.provided   + google_an + Size + Type.of.ownership + Sector + Python + Revenue + sas, family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_other_glm= predict(other_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_other_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_other_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
## First glm
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector + Revenue*sas , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
plot(effect("job_title_sim", final_glm), ci.style="band", rescale.axis=FALSE, multiline=TRUE, ylab="Avg.Salary.K.", rug=FALSE, main="")
plot(effect("job_title_sim:Python", final_glm), ci.style="band", rescale.axis=FALSE, multiline=TRUE, ylab="Avg.Salary.K.", rug=FALSE, main="")
plot(effect("Sector", final_glm), ci.style="band", rescale.axis=FALSE, multiline=TRUE, ylab="Avg.Salary.K.", rug=FALSE, main="")
plot(effect("Sector", final_glm), ci.style="band", rescale.axis=TRUE, multiline=TRUE, ylab="Avg.Salary.K.", rug=FALSE, main="")
plot(effect("Sector", final_glm), ci.style="band", rescale.axis=TRUE, multiline=TRUE, ylab="Avg.Salary.K.", rug=FALSE, main="")
plot(effect("Sector", final_glm), ci.style="band", rescale.axis=FALSE, multiline=TRUE, ylab="Avg.Salary.K.", rug=FALSE, main="")
plot(effect("Revenue", final_glm), ci.style="band", rescale.axis=FALSE, multiline=TRUE, ylab="Avg.Salary.K.", rug=FALSE, main="")
plot(effect("Revenue:sas", final_glm), ci.style="band", rescale.axis=FALSE, multiline=TRUE, ylab="Avg.Salary.K.", rug=FALSE, main="")
summary(Salary_data_Train$Sector)
## First glm
Salary_data_Train$Sector <- as.factor(Salary_data_Train$Sector)
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector + Revenue*sas , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
plot(effect("Sector", final_glm), ci.style="band", rescale.axis=FALSE, multiline=TRUE, ylab="Avg.Salary.K.", rug=FALSE, main="")
Salary_data_Train$Sector
summary(Salary_data_Train$Sector)
## First glm
Salary_data_Train$Sector <- as.factor(Salary_data_Train$Sector)
Salary_data_Train$Python <- as.numeric(Salary_data_Train$Python)
Salary_data_Train$job_title_sim <- as.factor(Salary_data_Train$job_title_sim)
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector + Revenue*sas , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
plot(effect("Sector", final_glm), ci.style="band", rescale.axis=FALSE, multiline=TRUE, ylab="Avg.Salary.K.", rug=FALSE, main="")
plot(effect("job_title_sim", final_glm), ci.style="band", rescale.axis=FALSE, multiline=TRUE, ylab="Avg.Salary.K.", rug=FALSE, main="")
## First glm
Salary_data_Train$Sector <- as.factor(Salary_data_Train$Sector)
Salary_data_Train$Python <- as.numeric(Salary_data_Train$Python)
Salary_data_Train$job_title_sim <- as.factor(Salary_data_Train$job_title_sim)
Salary_data_Train$Revenue <- as.factor(Salary_data_Train$Revenue)
Salary_data_Train$sas <- as.numeric(Salary_data_Train$sas)
final_glm = glm(Avg.Salary.K. ~ job_title_sim*Python  + Sector + Revenue*sas , family = Gamma, data = Salary_data_Train)
#summary(first_glm)
pred_final_glm= predict(final_glm, newdata= Salary_data_Test)
#Let's know validate the predictions, calculating R^2 in the testing set
# Evaluate performance on the test set
R2_test <- cor(pred_final_glm, Salary_data_Test$Avg.Salary.K.)^2
RMSE_test <- sqrt(mean((pred_final_glm - Salary_data_Test$Avg.Salary.K.)^2))
cat("R-squared on test set:", R2_test, "\n")
cat("RMSE on test set:", RMSE_test, "\n")
plot(effect("job_title_sim", final_glm), ci.style="band", rescale.axis=FALSE, multiline=TRUE, ylab="Avg.Salary.K.", rug=FALSE, main="")
any(is.infinite(Salary_data_Train$Sector))
any(!is.finite(Salary_data_Train$Sector))
any(is.na(Salary_data_Train$Sector))
plot(effect("job_title_sim", final_glm), ci.style="band", rescale.axis=TRUE, multiline=TRUE, ylab="Avg.Salary.K.", rug=T, main="")
plot(effect("job_title_sim", final_glm), ci.style="band", rescale.axis=FALSE, multiline=TRUE, ylab="Avg.Salary.K.", rug=T, main="")
plot(effect("job_title_sim", final_glm), ci.style="band", rescale.axis=FALSE, multiline=TRUE, ylab="Avg.Salary.K.", rug=FALSE, main="")
update.packages(ask = FALSE, checkBuilt = TRUE)
library(tidyverse)
library(MASS)
library(caret) #ML tools
library(e1071)
par(mar = c(2, 2, 2, 2))
# Loading and preparing data
Airbnb <- read.csv("Airbnb_data.csv")
Airbnb
# split between training and testing sets
spl = createDataPartition(Airbnb$Price, p = 0.8, list = FALSE)  # 80% for training
AirbnbTrain = Airbnb[spl,]
AirbnbTest = Airbnb[-spl,]
str(AirbnbTrain)
any(is.na(AirbnbTrain))
summary(AirbnbTrain)
boxplot(AirbnbTrain$Price)
AirbnbTrain <- subset(AirbnbTrain, select = -c(Attraction.Index, Restraunt.Index ))
table(AirbnbTrain$City)
table(AirbnbTrain$Day)
table(AirbnbTrain$Room.Type)
table(AirbnbTrain$Shared.Room)
table(AirbnbTrain$Private.Room)
table(AirbnbTrain$Superhost)
table(AirbnbTrain$Multiple.Rooms)
table(AirbnbTrain$Business)
AirbnbTrain <- subset(AirbnbTrain, select = -c(Private.Room, Shared.Room ))
AirbnbTrain$Superhost<-as.numeric(as.logical(AirbnbTrain$Superhost))
ggplot(AirbnbTrain, aes(Price)) + geom_density(fill="lightblue") + xlab("Price") + ggtitle("Price distribution")
## from the statistics obtained before we know price has no 0 values as minimum is 34, so we can apply the logarithm to better visualize it
ggplot(AirbnbTrain, aes(log(Price))) + geom_density(fill="lightblue") + xlab("log(Price)") + ggtitle("Price distribution")
mean(log(AirbnbTrain$Price))
exp(mean(log(AirbnbTrain$Price)))
ggplot(AirbnbTrain, aes(log(Price))) + geom_density(aes(group=City, colour=City, fill=City), alpha=0.1) + ggtitle("Price distribution")
ggplot(AirbnbTrain, aes(x=City.Center..km., y=log(Price), color=City)) + geom_point(alpha=0.8) + ggtitle("Price vs City Center distance")
ggplot(AirbnbTrain, aes(x=Metro.Distance..km., y=log(Price), color=City)) + geom_point(alpha=0.8) + ggtitle("Price vs Metro distance")
ggplot(AirbnbTrain, aes(x = Bedrooms, y = log(Price), fill = City)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.8) +
ggtitle("Price vs Number of bedrooms")
table(AirbnbTrain$Bedrooms)
ggplot(AirbnbTrain, aes(x=Normalised.Attraction.Index, y=log(Price), color=City)) + geom_point(alpha=0.8) + ggtitle("Price vs Attraction Index")
