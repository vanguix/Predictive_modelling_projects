table(CancerTest$Dust.Allergy)## not 8
table(CancerTest$Weight.Loss)## not 8
table(CancerTest$Swallowing.Difficulty)
table(CancerTest$Clubbing.of.Finger.Nails)
table(CancerTest$Frequent.Cold)
table(CancerTest$Dry.Cough)
table(CancerTest$Snoring)
table(CancerTest$Dust.Allergy)## not 8
table(CancerTest$Weight.Loss)## not 8
table(CancerTest$Clubbing.of.Finger.Nails)
table(CancerTest$Frequent.Cold)
table(CancerTest$Dry.Cough)
table(CancerTest$Snoring)
table(CancerTest$Dust.Allergy)## not 8
table(CancerTest$Weight.Loss)## not 8
table(CancerTest$Frequent.Cold)
table(CancerTest$Dry.Cough)
table(CancerTest$Snoring)
table(CancerTest$Dust.Allergy)## not 8
table(CancerTest$Weight.Loss)## not 8
cat("Gender:", table(CancerTrain$Gender) , "\n")
cat("Air.Pollution:",table(CancerTrain$Air.Pollution), "\n")
cat("Alcohol.use:",table(CancerTrain$Alcohol.use), "\n")
cat("Dust.Allergy:",table(CancerTrain$Dust.Allergy), "\n")
cat("OccuPational.Hazards:",table(CancerTrain$OccuPational.Hazards), "\n")
cat("Genetic.Risk:",table(CancerTrain$Genetic.Risk), "\n")
cat("chronic.Lung.Disease:",table(CancerTrain$chronic.Lung.Disease), "\n")
cat("Balanced.Diet:",table(CancerTrain$Balanced.Diet), "\n")
cat("Obesity:",table(CancerTrain$Obesity), "\n")
cat("Smoking:",table(CancerTrain$Smoking), "\n")
cat("chronic.Lung.Disease:",table(CancerTrain$chronic.Lung.Disease), "\n")
cat("Passive.Smoker:",table(CancerTrain$Passive.Smoker), "\n")
cat("Chest.Pain:",table(CancerTrain$Chest.Pain), "\n")
cat("Coughing.of.Blood:",table(CancerTrain$Coughing.of.Blood), "\n")
cat("Fatigue:",table(CancerTrain$Fatigue), "\n")
cat("Weight.Loss:",table(CancerTrain$Weight.Loss), "\n")
cat("Shortness.of.Breath:",table(CancerTrain$Shortness.of.Breath), "\n")
cat("Wheezing:",table(CancerTrain$Wheezing), "\n")
cat("Swallowing.Difficulty:",table(CancerTrain$Swallowing.Difficulty), "\n")
cat("Clubbing.of.Finger.Nails:",table(CancerTrain$Clubbing.of.Finger.Nails), "\n")
cat("Frequent.Cold:",table(CancerTrain$Frequent.Cold), "\n")
cat("Dry.Cough:",table(CancerTrain$Dry.Cough), "\n")
cat("Snoring:",table(CancerTrain$Snoring), "\n")
table(CancerTrain$Level)
table(CancerTrain$Level)
ggplot(CancerTrain, aes(Level)) + geom_density(fill="lightblue") + xlab("Level") + ggtitle("Price distribution")
library(ggplot2)
table(CancerTrain$Level)
ggplot(CancerTrain, aes(Level)) + geom_density(fill="lightblue") + xlab("Level") + ggtitle("Price distribution")
ctrl <- trainControl(method = "repeatedcv",
number = 3, repeats = 1)
library(caret)
ctrl <- trainControl(method = "repeatedcv",
number = 3, repeats = 1)
ModelS = level ~ Age
lm_tune <- train(ModelS, data = CancerTrain,
method = "lm",
preProc=c('scale', 'center'),
trControl = ctrl)
library(caret)
ctrl <- trainControl(method = "repeatedcv",
number = 3, repeats = 1)
ModelS = Level ~ Age
lm_tune <- train(ModelS, data = CancerTrain,
method = "lm",
preProc=c('scale', 'center'),
trControl = ctrl)
library(caret)
ctrl <- trainControl(method = "repeatedcv",
number = 3, repeats = 1)
ModelS = Age ~ Level
lm_tune <- train(ModelS, data = CancerTrain,
method = "lm",
preProc=c('scale', 'center'),
trControl = ctrl)
lm_tune
test_results <- data.frame(Age = log(CancerTest$Age))
test_results$lm <- predict(lm_tune, CancerTest)
observed = CancerTest$Age
# computes RMSE, R2 and MAE
postResample(pred = test_results$lm,  obs = observed)
cat("Gender:", table(CancerTrain$Gender) , "\n")
cat("Air.Pollution:",table(CancerTrain$Air.Pollution), "\n")
cat("Alcohol.use:",table(CancerTrain$Alcohol.use), "\n")
cat("Dust.Allergy:",table(CancerTrain$Dust.Allergy), "\n")
cat("OccuPational.Hazards:",table(CancerTrain$OccuPational.Hazards), "\n")
cat("Genetic.Risk:",table(CancerTrain$Genetic.Risk), "\n")
cat("chronic.Lung.Disease:",table(CancerTrain$chronic.Lung.Disease), "\n")
cat("Balanced.Diet:",table(CancerTrain$Balanced.Diet), "\n")
cat("Obesity:",table(CancerTrain$Obesity), "\n")
cat("Smoking:",table(CancerTrain$Smoking), "\n")
cat("chronic.Lung.Disease:",table(CancerTrain$chronic.Lung.Disease), "\n")
cat("Passive.Smoker:",table(CancerTrain$Passive.Smoker), "\n")
cat("Chest.Pain:",table(CancerTrain$Chest.Pain), "\n")
cat("Coughing.of.Blood:",table(CancerTrain$Coughing.of.Blood), "\n")
cat("Fatigue:",table(CancerTrain$Fatigue), "\n")
cat("Weight.Loss:",table(CancerTrain$Weight.Loss), "\n")
cat("Shortness.of.Breath:",table(CancerTrain$Shortness.of.Breath), "\n")
cat("Wheezing:",table(CancerTrain$Wheezing), "\n")
cat("Swallowing.Difficulty:",table(CancerTrain$Swallowing.Difficulty), "\n")
cat("Clubbing.of.Finger.Nails:",table(CancerTrain$Clubbing.of.Finger.Nails), "\n")
cat("Frequent.Cold:",table(CancerTrain$Frequent.Cold), "\n")
cat("Dry.Cough:",table(CancerTrain$Dry.Cough), "\n")
cat("Snoring:",table(CancerTrain$Snoring), "\n")
cat("Level:",table(CancerTrain$Level), "\n")
library(ggplot2)
summary(CancerTrain$Age)
ggplot(CancerTrain, aes(Age)) + geom_density(fill="lightblue") + xlab("Age") + ggtitle("Age distribution")
library(caret)
ctrl <- trainControl(method = "repeatedcv",
number = 3, repeats = 1)
ModelS = level ~ Age
lm_tune <- train(ModelS, data = CancerTrain,
method = "glmnet",
trControl = ctrl)
library(caret)
ctrl <- trainControl(method = "repeatedcv",
number = 3, repeats = 1)
ModelS = Level ~ Age
lm_tune <- train(ModelS, data = CancerTrain,
method = "glmnet",
trControl = ctrl)
names(getModelInfo()) # to know all the models caret has
names(getModelInfo()) # to know all the models caret has
library(caret)
ctrl <- trainControl(method = "repeatedcv",
number = 3, repeats = 1)
ModelS = Level ~ Age
lm_tune <- train(ModelS, data = CancerTrain,
method = "logreg",
trControl = ctrl)
library(caret)
ctrl <- trainControl(method = "repeatedcv",
number = 3, repeats = 1)
ModelS = Level ~ Age
lm_tune <- train(ModelS, data = CancerTrain,
method = "logreg",
trControl = ctrl)
library(ggplot2)
summary(CancerTrain$Age)
ggplot(CancerTrain, aes(Age)) + geom_density(fill="lightblue") + xlab("Age") + ggtitle("Age distribution")
library(ggplot2)
summary(CancerTrain$Age)
ggplot(CancerTrain, aes(log(Age)) + geom_density(fill="lightblue") + xlab("Age") + ggtitle("Age distribution")
library(ggplot2)
summary(CancerTrain$Age)
ggplot(CancerTrain, aes(log(Age)) + geom_density(fill="lightblue") + xlab("Age") + ggtitle("Age distribution"))
library(ggplot2)
summary(CancerTrain$Age)
ggplot(CancerTrain, aes(log(Age))) + geom_density(fill="lightblue") + xlab("Age") + ggtitle("Age distribution")
library(caret)
ctrl <- trainControl(method = "repeatedcv",
number = 3, repeats = 1)
ModelS = log(Age) ~ Level
lm_tune <- train(ModelS, data = CancerTrain,
method = "lm",
preProc=c('scale', 'center'),
trControl = ctrl)
lm_tune
test_results <- data.frame(Age = log(CancerTest$Age))
test_results$lm <- predict(lm_tune, CancerTest)
observed = log(CancerTest$Age)
# computes RMSE, R2 and MAE
postResample(pred = test_results$lm,  obs = observed)
library(caret)
ctrl <- trainControl(method = "repeatedcv",
number = 3, repeats = 1)
ModelS = log(Age) ~ Level + Dust.Allergy
lm_tune <- train(ModelS, data = CancerTrain,
method = "lm",
preProc=c('scale', 'center'),
trControl = ctrl)
lm_tune
test_results <- data.frame(Age = log(CancerTest$Age))
test_results$lm <- predict(lm_tune, CancerTest)
observed = log(CancerTest$Age)
# computes RMSE, R2 and MAE
postResample(pred = test_results$lm,  obs = observed)
Train <- Train %>%   dplyr::select(Country, Status, everything())
library(caret)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(pdp)
data <- read.csv("Life Expectancy Data.csv")
#we set seed for reproducibility
set.seed(123)
# split between training and testing sets
spl = createDataPartition(data$Year, p = 0.8, list = FALSE)  # 80% for training
Train = data[spl,]
Test = data[-spl,]
str(Train)
sum(is.na(Train$Country))
sum(is.na(Train$Year))
sum(is.na(Train$Status))
sum(is.na(Train$Life.expectancy))
sum(is.na(Train$Adult.Mortality))
sum(is.na(Train$infant.deaths))
sum(is.na(Train$percentage.expenditure))
sum(is.na(Train$Measles))
sum(is.na(Train$BMI))
sum(is.na(Train$under.five.deaths))
sum(is.na(Train$Polio))
sum(is.na(Train$Diphtheria))
sum(is.na(Train$HIV.AIDS))
sum(is.na(Train$thinness..1.19.years))
sum(is.na(Train$thinness.5.9.years))
sum(is.na(Train$Alcohol))######
sum(is.na(Train$Hepatitis.B))#####
sum(is.na(Train$Total.expenditure))####
sum(is.na(Train$GDP))####
sum(is.na(Train$Population))#####
sum(is.na(Train$Income.composition.of.resources))####
sum(is.na(Train$Schooling))####
# Remove rows with missing values in specified columns
Train <- Train[complete.cases(Train$Life.expectancy, Train$Adult.Mortality, Train$BMI,
Train$Polio, Train$Diphtheria, Train$thinness..1.19.years,
Train$thinness.5.9.years), ]
# Check for missing values after removal
sum(is.na(Train$Life.expectancy))
sum(is.na(Train$Adult.Mortality))
sum(is.na(Train$BMI))
sum(is.na(Train$Polio))
sum(is.na(Train$Diphtheria))
sum(is.na(Train$thinness..1.19.years))
sum(is.na(Train$thinness.5.9.years))
# Replace missing values with the mean for specified columns
Train <- Train %>%
mutate_all(~ifelse(is.na(.), mean(., na.rm = TRUE), .))
sum(is.na(Train$Alcohol))######
sum(is.na(Train$Hepatitis.B))#####
sum(is.na(Train$Total.expenditure))####
sum(is.na(Train$GDP))####
sum(is.na(Train$Population))#####
sum(is.na(Train$Income.composition.of.resources))####
sum(is.na(Train$Schooling))####
sum(is.na(Train))
sum(is.na(Test$Life.expectancy))
sum(is.na(Test$Adult.Mortality))
sum(is.na(Test$Alcohol))
sum(is.na(Test$Hepatitis.B))
sum(is.na(Test$BMI))
sum(is.na(Test$Polio))
sum(is.na(Test$Diphtheria))
sum(is.na(Test$GDP))
sum(is.na(Test$Population))
sum(is.na(Test$thinness..1.19.years))
sum(is.na(Test$thinness.5.9.years))
sum(is.na(Test$Income.composition.of.resources))
sum(is.na(Test$Schooling))
# Remove rows with missing values in specified columns
Test <- Test[complete.cases(Test$Life.expectancy, Test$Adult.Mortality, Test$BMI,
Test$Polio, Test$Diphtheria, Test$thinness..1.19.years,
Test$thinness.5.9.years), ]
# Check for missing values after removal
sum(is.na(Test$Life.expectancy))
sum(is.na(Test$Adult.Mortality))
sum(is.na(Test$BMI))
sum(is.na(Test$Polio))
sum(is.na(Test$Diphtheria))
sum(is.na(Test$thinness..1.19.years))
sum(is.na(Test$thinness.5.9.years))
# Identify numerical columns in Train
numerical_columns <- sapply(Train, is.numeric)
# Calculate means for numerical columns
train_means <- colMeans(Train[, numerical_columns], na.rm = TRUE)
# Replace missing values in the Test set with the means from the Train set
Test <- Test %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), train_means[match(cur_column(), names(train_means))], .)))
sum(is.na(Test))
Train <- Train %>%   dplyr::select(Country, Status, everything())
par(mfrow=c(4, 5),  mar = c(2, 2, 1, 1))  # Adjust the layout based on the number of variables
for (col in names(Train[,c(3:22)])) {
boxplot(Train[, col], main=col, col="skyblue", border="black")
}
cat("Country:", table(Train$Country) , "\n")
cat("Status:",table(Train$Status), "\n")
# Assuming Train is a data frame with the specified columns
# Create a list of variables
variables <- c("Country", "Status")
# Set up the plotting area
par(mfrow = c(2, 1), mar = c(4, 4, 2, 2))  # Adjust the margins as needed
# Loop through each variable and create a bar chart
for (variable in variables) {
# Count occurrences of each category
variable_counts <- table(Train[[variable]])
# Create a bar chart
barplot(variable_counts, main = variable, col = rainbow(length(variable_counts)))
}
# Reset the plotting area
par(mfrow = c(1, 1))
ggplot(Train, aes(Life.expectancy)) + geom_density(fill="lightblue") + xlab("Age") + ggtitle("Life.expectancy distribution")
ggplot(Train, aes(log(Life.expectancy))) + geom_density(fill="lightblue") + xlab("Age") + ggtitle("log(Life.expectancy) distribution")
ggplot(Train, aes(sqrt(Life.expectancy))) + geom_density(fill="lightblue") + xlab("Age") + ggtitle("sqrt(Life.expectancy) distribution")
corr_delay <- sort(cor(Train[,c(3:22)])["Life.expectancy",], decreasing = T)
corr=data.frame(corr_delay)
ggplot(corr,aes(x = row.names(corr), y = corr_delay)) +
geom_bar(stat = "identity", fill = "lightblue") +
scale_x_discrete(limits= row.names(corr)) +
labs(x = "", y = "Life.expectancy", title = "Correlations") +
theme(plot.title = element_text(hjust = 0, size = rel(1.5)),
axis.text.x = element_text(angle = 45, hjust = 1))
# Plot for Adult.Mortality
plot1 <- ggplot(Train, aes(x = Life.expectancy, y = Adult.Mortality)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Adult Mortality", x = "Life Expectancy", y = "Adult Mortality")
# Plot for HIV.AIDS
plot2 <- ggplot(Train, aes(x = Life.expectancy, y = HIV.AIDS)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "HIV/AIDS", x = "Life Expectancy", y = "HIV/AIDS")
# Plot for Schooling
plot3 <- ggplot(Train, aes(x = Life.expectancy, y = Schooling)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Schooling", x = "Life Expectancy", y = "Schooling")
# Plot for Income.composition.of.resources
plot4 <- ggplot(Train, aes(x = Life.expectancy, y = Income.composition.of.resources)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Income Composition", x = "Life Expectancy", y = "Income Composition")
# Combine the plots into a 2x2 grid
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
ggplot(Train, aes(Life.expectancy)) + geom_density(aes(group=Status, colour=Status, fill=Status), alpha=0.1) + ggtitle("Life expectancy by country distribution")
mean(Train$Life.expectancy)
# This is equivalent to
benchFit <- lm(Life.expectancy ~ 1, data=Train)
predictions <- predict(benchFit, newdata=Test) ## we squared the predictions as the transformation in sqrt
RMSE <- sqrt(mean((predictions - Train$Life.expectancy)^2))
RMSE
length(predictions)
length(Train$Life.expectancy)
mean(Train$Life.expectancy)
# This is equivalent to
benchFit <- lm(Life.expectancy ~ 1, data=Train)
predictions <- predict(benchFit, newdata=Test) ## we squared the predictions as the transformation in sqrt
RMSE <- sqrt(mean((predictions - Test$Life.expectancy)^2))
RMSE
length(predictions)
length(Train$Life.expectancy)
mean(Train$Life.expectancy)
# This is equivalent to
benchFit <- lm(Life.expectancy ~ 1, data=Train)
predictions <- predict(benchFit, newdata=Test) ## we squared the predictions as the transformation in sqrt
RMSE <- sqrt(mean((predictions - Test$Life.expectancy)^2))
RMSE
# If we want to fix the hyper-parameters (no tuning), then no trainControl is needed
ctrl <- trainControl(method = "none")
ModelO = Life.expectancy ~ .
lm_tune <- train(ModelO, data = Train,
method = "lm",
preProc=c('scale', 'center'),
trControl = ctrl)
lm_tune
test_results <- data.frame(Life.expectancy = Test$Life.expectancy)
test_results$lm_1 <- predict(lm_tune, Test)
observed = Test$Life.expectancy
# computes RMSE, R2 and MAE
x= postResample(pred = test_results$lm_1,  obs = observed)
metric_results <- data.frame(Method= "Overfitted", RMSE = x[1], R2 = x[2], MAE = x[3], stringsAsFactors = FALSE)
ggplot(test_results, aes(x = lm_1, y = Life.expectancy)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +  # Add a reference line (y = x)
labs(title = "True vs Predicted Values",
x = "Predicted Values (lm_1)",
y = "True Values (Age)")
# If we want to fix the hyper-parameters (no tuning), then no trainControl is needed
ctrl <- trainControl(method = "none")
ModelO = Life.expectancy ~ .
lm_tune <- train(ModelO, data = Train,
method = "lm",
preProc=c('scale', 'center'),
trControl = ctrl)
lm_tune
test_results <- data.frame(Life.expectancy = Test$Life.expectancy)
test_results$lm_1 <- predict(lm_tune, Test)
observed = Test$Life.expectancy
# computes RMSE, R2 and MAE
x= postResample(pred = test_results$lm_1,  obs = observed)
x
metric_results <- data.frame(Method= "Overfitted", RMSE = x[1], R2 = x[2], MAE = x[3], stringsAsFactors = FALSE)
Model = Life.expectancy ~ Status*Schooling^2 + Adult.Mortality*HIV.AIDS +  Income.composition.of.resources + BMI + log(Diphtheria) + log(Polio) + Alcohol*percentage.expenditure + thinness..1.19.years*thinness.5.9.years
lm_tune <- train(Model, data = Train,
method = "lm",
preProc=c('scale', 'center'),
trControl = ctrl)
lm_tune
test_results$lm_2 <- predict(lm_tune, Test)
x= postResample(pred = test_results$lm_2,  obs = observed)
new_method_results <- c("Multiple Reg", x[1], x[2], x[3])
# Add the new row to the metric_results using rbind
metric_results <- rbind(metric_results, new_method_results)
# Create a scatter plot
ggplot(test_results, aes(x = lm_2, y = Life.expectancy)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +  # Add a reference line (y = x)
labs(title = "True vs Predicted Values",
x = "Predicted Values (lm_2)",
y = "True Values (Age)")
Model = Life.expectancy ~ Status*Schooling^2 + Adult.Mortality*HIV.AIDS +  Income.composition.of.resources + BMI + log(Diphtheria) + log(Polio) + Alcohol*percentage.expenditure + thinness..1.19.years*thinness.5.9.years
lm_tune <- train(Model, data = Train,
method = "lm",
preProc=c('scale', 'center'),
trControl = ctrl)
lm_tune
test_results$lm_2 <- predict(lm_tune, Test)
x= postResample(pred = test_results$lm_2,  obs = observed)
x
new_method_results <- c("Multiple Reg", x[1], x[2], x[3])
# Add the new row to the metric_results using rbind
metric_results <- rbind(metric_results, new_method_results)
# Create a scatter plot
ggplot(test_results, aes(x = lm_2, y = Life.expectancy)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +  # Add a reference line (y = x)
labs(title = "True vs Predicted Values",
x = "Predicted Values (lm_2)",
y = "True Values (Age)")
Model = Life.expectancy ~ Status*Schooling^2 + Adult.Mortality*HIV.AIDS +  Income.composition.of.resources + BMI + Diphtheria + Polio + Alcohol*percentage.expenditure + thinness..1.19.years*thinness.5.9.years
ctrl <- trainControl(method = "repeatedcv",
number = 5, repeats = 1)
for_tune <- train(Model, data = Train,
method = "leapForward",
preProc=c('scale', 'center'),
tuneGrid = expand.grid(nvmax = 4:8),
trControl = ctrl)
for_tune
plot(for_tune)
coef(for_tune$finalModel, for_tune$bestTune$nvmax)
## when predicting we directly use for_tune as there the correct parameters are saved after training wit CV
test_results$frw <- predict(for_tune, Test)
x= postResample(pred = test_results$frw,  obs = observed)
new_method_results <- c("Forward", x[1], x[2], x[3])
# Add the new row to the metric_results using rbind
metric_results <- rbind(metric_results, new_method_results)
View(metric_results)
## when predicting we directly use for_tune as there the correct parameters are saved after training wit CV
test_results$frw <- predict(for_tune, Test)
x= postResample(pred = test_results$frw,  obs = observed)
new_method_results <- c("Forward", x[1], x[2], x[3])
# Add the new row to the metric_results using rbind
metric_results <- rbind(metric_results, new_method_results)
metric_results
# Create a scatter plot
ggplot(test_results, aes(x = frw, y = Life.expectancy)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +  # Add a reference line (y = x)
labs(title = "True vs Predicted Values",
x = "Predicted Values (frw)",
y = "True Values (Age)")
Model = Life.expectancy ~ Status*Schooling^2 + Adult.Mortality*HIV.AIDS +  Income.composition.of.resources + BMI + log(Diphtheria) + log(Polio) + Alcohol*percentage.expenditure + thinness..1.19.years*thinness.5.9.years
lm_tune <- train(Model, data = Train,
method = "lm",
preProc=c('scale', 'center'),
trControl = ctrl)
lm_tune
test_results$lm_2 <- predict(lm_tune, Test)
x= postResample(pred = test_results$lm_2,  obs = observed)
x
new_method_results <- c("Multiple Reg", x[1], x[2], x[3])
# Add the new row to the metric_results using rbind
metric_results <- rbind(metric_results, new_method_results)
# Create a scatter plot
ggplot(test_results, aes(x = lm_2, y = Life.expectancy)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +  # Add a reference line (y = x)
labs(title = "True vs Predicted Values",
x = "Predicted Values (lm_2)",
y = "True Values (Age)")
back_tune <- train(Model, data = Train,
method = "leapBackward",
preProc=c('scale', 'center'),
tuneGrid = expand.grid(nvmax = 4:8),
trControl = ctrl)
back_tune
plot(back_tune)
coef(back_tune$finalModel, back_tune$bestTune$nvmax)
coef(back_tune$finalModel, back_tune$bestTune$nvmax)
test_results$bw <- predict(back_tune, Test)
x= postResample(pred = test_results$bw,  obs = observed)
new_method_results <- c("Backward", x[1], x[2], x[3])
# Add the new row to the metric_results using rbind
metric_results <- rbind(metric_results, new_method_results)
metric_results
step_tune <- train(Model, data = Train,
method = "leapSeq",
preProc=c('scale', 'center'),
tuneGrid = expand.grid(nvmax = 4:8),
trControl = ctrl)
plot(step_tune)
# which variables are selected?
coef(step_tune$finalModel, step_tune$bestTune$nvmax)
test_results$seq <- predict(step_tune, Test)
x= postResample(pred = test_results$seq,  obs = observed)
new_method_results <- c("Step", x[1], x[2], x[3])
# Add the new row to the metric_results using rbind
metric_results <- rbind(metric_results, new_method_results)
step_tune <- train(Model, data = Train,
method = "leapSeq",
preProc=c('scale', 'center'),
tuneGrid = expand.grid(nvmax = 4:8),
trControl = ctrl)
plot(step_tune)
# which variables are selected?
coef(step_tune$finalModel, step_tune$bestTune$nvmax)
test_results$seq <- predict(step_tune, Test)
x= postResample(pred = test_results$seq,  obs = observed)
new_method_results <- c("Step", x[1], x[2], x[3])
# Add the new row to the metric_results using rbind
metric_results <- rbind(metric_results, new_method_results)
metric_results
